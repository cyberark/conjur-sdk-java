#!/usr/bin/env bash
set -xe

# Run from top-level dir
cd "$(dirname "$0")/.." || (echo "Could not cd to parent dir"; exit 1)

source bin/util

regen_client=false
rebuild_conjur=true
major_java_version=17
target="oss"
install=""
test_case=""
coverage=false
unset_environment=false
docker_network=""

trap cleanup EXIT

if [ "$(tty)" == "not a tty" ]; then
  copy_prefix="sudo"
else
  copy_prefix=""
fi

dump_conjur_logs() {
  echo "Dumping Conjur logs..."
  case "$target" in
    "oss")
      docker compose logs conjur
      ;;
    "enterprise")
      docker compose -f docker-compose.enterprise.yml logs conjur-server
      ;;
    *)
      echo "Error: Invalid target value. Must be 'oss' or 'enterprise'."
      exit 1
      ;;
  esac
}

cleanup() {
  echo "Cleaning up..."

  case "$target" in
    "oss")
      docker compose rm --stop --force -v
      ;;
    "enterprise")
      docker compose -f docker-compose.enterprise.yml rm --stop --force -v
      ;;
    *)
      echo "Error: Invalid target value. Must be 'oss' or 'enterprise'."
      exit 1
      ;;
  esac
}

setup_keycloak(){
  announce "Setting up Keycloak"

  # Start Keycloak container
  DOCKER_NETWORK=$docker_network docker compose up -d keycloak
  sleep 20

  # Create Keycloak client and user
  docker compose exec -T keycloak bash -c "/scripts/create_client"
  docker compose exec -T keycloak bash -c "/scripts/create_user bob bob bob@conjur.net"

  # Fetch and copy the Keycloak certificate based on the target (oss or enterprise)
  fetch_and_copy_keycloak_cert
}

fetch_and_copy_keycloak_cert(){

  local fetch_certificate_command="/policy/oidc/fetchCertificate"
  local keycloak_cert_path="/etc/ssl/certs/keycloak.pem"

  if [ "$target" = "oss" ]; then
    docker compose exec -T conjur bash -c "$fetch_certificate_command"
    docker compose cp conjur:$keycloak_cert_path .
  elif [ "$target" = "enterprise" ]; then
    docker compose -f docker-compose.enterprise.yml exec -T conjur-server bash -c "$fetch_certificate_command"
    docker compose -f docker-compose.enterprise.yml cp conjur-server:$keycloak_cert_path .
  else
    echo "Error: Invalid target value. Must be 'oss' or 'enterprise'."
    exit 1
  fi
}

conjur_container_down(){
  case "$target" in
    "oss")
      if [ -z "$(docker compose ps -q conjur)" ] || [ -z "$(docker ps -q --no-trunc | grep $(docker compose ps -q conjur))" ]; then
        return 0
      else
        return 1
      fi
      ;;
    "enterprise")
      if [ -z "$(docker compose -f docker-compose.enterprise.yml ps -q conjur-server)" ] || [ -z "$(docker ps -q --no-trunc | grep $(docker compose -f docker-compose.enterprise.yml ps -q conjur-server))" ]; then
        return 0
      else
        return 1
      fi
      ;;
    *)
      echo "Error: Invalid target value. Must be 'oss' or 'enterprise'."
      exit 1
      ;;
  esac
}

print_help(){
  echo -e "Usage: ./bin/test_integration [--no-rebuild-conjur] [--no-regen-client] [--target]"
  echo
  echo -e "\tRunning this script without parameters will run ALL integration tests"
  echo -e "\tIn order to specify a subset of tests you can use a client flag (e.g. --python)"
  echo -e "\tYou can also specify a subset of client tests by including a parameter after the client flag"
  echo
  echo -e "\tThe --no-rebuild-conjur flag will prevent the conjur image from rebuilding"
  echo -e "\t\tWarning: this may cause some tests to fail"
  echo
  echo -e "\tThe --regen-client flag will re-generating the client before tests run"
  echo
  echo -e "\tThe --target flag will execute the tests on the Conjur flavors (OSS/Enterprise)"
  echo
  echo -e "\tThe -d flag will turn on debug mode for the integration test runs"
  echo
  echo -e "\tThe --jar flag will test then build the project outputing to client/target"
  echo
  echo -e "\tThe -j or --java-version flag allows you yo specify a specific java version used to compile/test the project"
  echo
  echo -e "\tThe -e flag will turn off the default client environment variables to make sure the client works with a manual configuration"
}

run_java_tests(){
  if [ "$regen_client" = true ]; then
    announce "Generating Java Client"
    bin/refresh_client -l java
  fi

  maven_command="mvn verify $install"

  if [ "$coverage" = "true" ]; then
    maven_command+=" && mvn jacoco:report"
  fi

  case "$target" in
    "oss")
      http_appliance_url="http://conjur"
      https_appliance_url="https://conjur-https"
      account="dev"
      authn_login="admin"
      cert_file="/https/ca.crt"
      docker_network="conjur-sdk-java"
      ;;
    "enterprise")
      http_appliance_url="https://conjur-server"
      https_appliance_url="https://conjur-server"
      account="demo"
      authn_login="admin"
      cert_file="/https/conjur-server.pem"
      docker_network="dap_net"
      ;;
    *)
      echo "Error: Invalid target value. Must be 'oss' or 'enterprise'."
      exit 1
      ;;
  esac

  environment="-e CONJUR_HTTP_APPLIANCE_URL=$http_appliance_url \
  -e APPLIANCE_URL=$https_appliance_url \
  -e ACCOUNT=$account \
  -e AUTHN_LOGIN=$authn_login \
  -e CERT_FILE=$cert_file "

  if [ "$unset_environment" = false ]; then
    environment+="\
    -e CONJUR_APPLIANCE_URL=$https_appliance_url \
    -e CONJUR_ACCOUNT=$account \
    -e CONJUR_AUTHN_LOGIN=$authn_login \
    -e CONJUR_CERT_FILE=$cert_file \
    -e CONJUR_AUTO_UPDATE_TOKEN=true \
    -e ENV_VARIABLES_SET=true"
  else
    environment+="\
    -e CONJUR_AUTO_UPDATE_TOKEN=false \
    -e ENV_VARIABLES_SET=false"
  fi
  
  docker run --rm --network $docker_network \
    -v ${PWD}/client:/client \
    -v ${PWD}/test/config:/config \
    -v ${PWD}/config/https:/https \
    $environment \
    --env-file .env \
    -w /client \
    test bash -c "$maven_command"
}

while test $# -gt 0
do
  param=$1
  shift
  case "$param" in
    -d) DEBUG="true" ;;
    -h|--help) print_help; exit 0 ;;
    --no-rebuild-conjur) rebuild_conjur=false ;;
    --regen-client) regen_client=true ;;
    -j|--java-version) major_java_version=$1; shift ;;
    --jar) install="install" ;;
    -t|--test) test_case="-Dtest=$1"; shift ;;
    -c|--coverage) coverage=true ;;
    -e) unset_environment=true ;;
    --target) target=$1; shift ;;
    *) break ;;
  esac
done

if [ "$rebuild_conjur" = true ] || conjur_container_down; then
  if [ "$target" = "oss" ]; then
    announce "Starting Conjur OSS..."
    bin/start_conjur
    docker_network="conjur-sdk-java"
  elif [ "$target" = "enterprise" ]; then
    announce "Starting Conjur Enterprise..."
    bin/start_enterprise
    docker_network="dap_net"
  else
    echo "Error: Invalid target value. Must be 'oss' or 'enterprise'."
    exit 1
  fi
fi

announce "Configuring Test Environment"
bin/get_conjur_admin_key "$target"
setup_keycloak
config/https/generate_csr

docker build \
    --build-arg java_version=17 \
    -t test \
    -f Dockerfile.test \
    .
run_java_tests
if [[ "$?" -ne 0 ]]; then
  dump_conjur_logs
fi
