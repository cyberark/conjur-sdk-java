#!/usr/bin/env bash
set -e

# Run from top-level dir
cd "$(dirname "$0")/.." || (echo "Could not cd to parent dir"; exit 1)

source bin/util

regen_client=false
rebuild_conjur=true
major_java_version=16
install=""
test_case=""
coverage=false
unset_environment=false

trap cleanup EXIT

if [ "$(tty)" == "not a tty" ]; then
  copy_prefix="sudo"
else
  copy_prefix=""
fi

dump_conjur_logs() {
  echo "Dumping Conjur logs..."
  docker compose logs conjur
}

cleanup() {
  echo "Cleaning up..."
  docker compose rm --stop --force -v
}

setup_keycloak(){
  announce "Setting up Keycloak"

  docker compose exec -T oidc-keycloak bash -c "/scripts/create_client"
  docker compose exec -T oidc-keycloak bash -c "/scripts/create_user bob bob bob@conjur.net"
  docker compose exec -T conjur bash -c "/policy/oidc/fetchCertificate"
}

conjur_container_down(){
  if [ -z `docker compose ps -q conjur` ]; then
    true
  elif [ -z `docker ps -q --no-trunc | grep $(docker compose ps -q conjur)` ]; then
    true
  else
    false
  fi
}

print_help(){
  echo -e "Usage: ./bin/test_integration [--no-rebuild-conjur] [--no-regen-client]"
  echo
  echo -e "\tRunning this script without parameters will run ALL integration tests"
  echo -e "\tIn order to specify a subset of tests you can use a client flag (e.g. --python)"
  echo -e "\tYou can also specify a subset of client tests by including a parameter after the client flag"
  echo
  echo -e "\tThe --no-rebuild-conjur flag will prevent the conjur image from rebuilding"
  echo -e "\t\tWarning: this may cause some tests to fail"
  echo
  echo -e "\tThe --regen-client flag will re-generating the client before tests run"
  echo
  echo -e "\tThe -d flag will turn on debug mode for the integration test runs"
  echo
  echo -e "\tThe --jar flag will test then build the project outputing to client/target"
  echo
  echo -e "\tThe -j or --java-version flag allows you yo specify a specific java version used to compile/test the project"
  echo
  echo -e "\tThe -e flag will turn off the default client environment variables to make sure the client works with a manual configuration"
}

run_java_tests(){
  if [ "$regen_client" = true ]; then
    announce "Generating Java Client"
    bin/refresh_client -l java
  fi

  maven_command="mvn verify $install"

  if [ "$coverage" = "true" ]; then
    maven_command+=" && mvn jacoco:report"
  fi

  environment="-e CONJUR_HTTP_APPLIANCE_URL=http://conjur \
  -e APPLIANCE_URL=https://conjur-https \
  -e ACCOUNT=dev \
  -e AUTHN_LOGIN=admin \
  -e CERT_FILE=/https/ca.crt "

  if [ "$unset_environment" = false ]; then
    environment+="\
    -e CONJUR_APPLIANCE_URL=https://conjur-https \
    -e CONJUR_ACCOUNT=dev \
    -e CONJUR_AUTHN_LOGIN=admin \
    -e CONJUR_CERT_FILE=/https/ca.crt \
    -e CONJUR_AUTO_UPDATE_TOKEN=true \
    -e ENV_VARIABLES_SET=true"
  else
    environment+="\
    -e CONJUR_AUTO_UPDATE_TOKEN=false \
    -e ENV_VARIABLES_SET=false"
  fi

  docker run --rm --network conjur-sdk-java \
    -v ${PWD}/client:/client \
    -v ${PWD}/test/config:/config \
    -v ${PWD}/config/https:/https \
    $environment \
    --env-file .env \
    -w /client \
    maven:3-openjdk-$major_java_version bash -c "$maven_command"
}

while test $# -gt 0
do
  param=$1
  shift
  case "$param" in
    -d)
      DEBUG="true"
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    --no-rebuild-conjur)
      rebuild_conjur=false
      ;;
    --regen-client)
      regen_client=true
      ;;
    -j|--java-version)
      major_java_version=$1
      shift
      ;;
    --jar)
      install="install"
      ;;
    -t|--test)
      test_case="-Dtest=$1"
      shift
      ;;
    -c|--coverage)
      coverage=true
      ;;
    -e)
      unset_environment=true
      ;;
    *)
      break
      ;;
  esac
done

if [ "$rebuild_conjur" = true ] || conjur_container_down; then
  announce "Starting Conjur Container"
  bin/start_conjur
fi

announce "Configuring Test Environment"
bin/get_conjur_admin_key
setup_keycloak
config/https/generate_csr

run_java_tests
if [[ "$?" -ne 0 ]]; then
  dump_conjur_logs
fi
