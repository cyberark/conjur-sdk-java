/*
 * Conjur
 * This is an API definition for CyberArk Conjur OSS. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.conjur.sdk.endpoint.roles;

import com.google.gson.internal.LinkedTreeMap;
import java.util.ArrayList;
import org.conjur.sdk.*;
import org.conjur.sdk.ApiException;
import org.conjur.sdk.endpoint.*;
import org.conjur.sdk.endpoint.roles.RoleTest;
import org.conjur.sdk.model.*;
import org.junit.*;


/**
 * API tests for RolesApi.
 */
public class RolesParamsApiTest extends RoleTest {

    /**
     * Make sure the roles are properly setup.
     */
    @Before
    public void setUpRoles() throws ApiException {
        addUserToGroup("bob");
        addUserToGroup("alice");

    }

    /**
     * Test get members count.
     */
    @Test
    public void getMembersCountTest() throws ApiException {
        String kind = "group";
        String identifier = "userGroup";
        String all = null;
        String memberships = null;
        String members = "";
        Integer offset = null;
        Integer limit = null;
        boolean count = true;
        String search = null;
        String graph = null;
        String requestId = null;
        LinkedTreeMap response = (LinkedTreeMap) api.showRole(
                account,
                kind,
                identifier,
                all,
                memberships,
                members,
                offset,
                limit,
                count,
                search,
                graph,
                requestId);

        Assert.assertEquals(3.0, response.get("count"));
    }

    /**
     * Test get members using the offset query parameter.
     */
    @Test
    public void getMembersOffset() throws ApiException {
        String kind = "group";
        String identifier = "userGroup";
        String all = null;
        String memberships = null;
        String members = "";
        Integer offset = 2;
        Integer limit = null;
        Boolean count = null;
        String search = null;
        String graph = null;
        String requestId = null;
        LinkedTreeMap response = (LinkedTreeMap) ((ArrayList) api.showRole(
                account,
                kind,
                identifier,
                all,
                memberships,
                members,
                offset,
                limit,
                count,
                search,
                graph,
                requestId)).get(0);
     
        Assert.assertEquals(false, response.get("admin_option"));
        Assert.assertEquals(false, response.get("ownership"));
        Assert.assertEquals(String.format("%s:user:bob", account), response.get("member"));
    }


    /**
     * Test get members using the limit query parameter.
     */
    @Test
    public void getMembersLimit() throws ApiException {
        String kind = "group";
        String identifier = "userGroup";
        String all = null;
        String memberships = null;
        String members = "";
        Integer offset = null;
        Integer limit = 2;
        Boolean count = null;
        String search = null;
        String graph = null;
        String requestId = null;
        ArrayList<?> response = (ArrayList) api.showRole(
                account,
                kind,
                identifier,
                all,
                memberships,
                members,
                offset,
                limit,
                count,
                search,
                graph,
                requestId);
     
        Assert.assertEquals(2, response.size());
    }

    /**
     * Test get members using the search query parameter.
     */
    @Test
    public void getMembersSearch() throws ApiException {
        String kind = "group";
        String identifier = "userGroup";
        String all = null;
        String memberships = null;
        String members = "";
        Integer offset = null;
        Integer limit = null;
        Boolean count = null;
        String search = "bob";
        String graph = null;
        String requestId = null;
        LinkedTreeMap response = (LinkedTreeMap) ((ArrayList) api.showRole(
                account,
                kind,
                identifier,
                all,
                memberships,
                members,
                offset,
                limit,
                count,
                search,
                graph,
                requestId)).get(0);
     
        Assert.assertEquals(String.format("%s:user:bob", account), response.get("member"));
    }

    /**
     * Test get members using the graph query parameter.
     */
    @Test
    public void getMembersGraph() throws ApiException {
        String kind = "user";
        String identifier = "admin";
        String all = null;
        String memberships = null;
        String members = null;
        Integer offset = null;
        Integer limit = null;
        Boolean count = true;
        String search = null;
        String graph = "";
        String requestId = null;
        ArrayList<?> response = (ArrayList) api.showRole(
                account,
                kind,
                identifier,
                all,
                memberships,
                members,
                offset,
                limit,
                count,
                search,
                graph,
                requestId);
     
        for (Object o : response) {
            Assert.assertTrue(((LinkedTreeMap) o).containsKey("child"));
            Assert.assertTrue(((LinkedTreeMap) o).containsKey("parent"));
        }
    }

}
