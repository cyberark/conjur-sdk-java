/*
 * Conjur
 * This is an API definition for CyberArk Conjur OSS. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.conjur.sdk.endpoint;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.conjur.sdk.*;
import org.conjur.sdk.ApiException;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;


/**
 * API tests for SecretsApi.
 */
public class SecretsApiTest extends ConfiguredTest {

    private final SecretsApi api = new SecretsApi();
    private static Map<String, String> defaultSecrets;


    /**
     * Creates two variables in Conjur for testing secret retrieval.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Before
    public void setDefaultSecrets() throws ApiException {
        defaultSecrets = new HashMap<String, String>();
        defaultSecrets.put("testSecret", "testvalue");
        defaultSecrets.put("one/password", "testvalue2");

        for (String identifier : defaultSecrets.keySet()) {
            String secretValue = defaultSecrets.get(identifier);
            api.createSecret(account, "variable", identifier, null, null, secretValue);
        }
    }

    /**
     * Creates a secret value within the specified variable.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecretTest() throws ApiException {
        String kind = "variable";
        String identifier = "testSecret";
        String expirations = null;
        String requestId = null;
        ApiResponse<?> response = api.createSecretWithHttpInfo(
            account,
            kind,
            identifier,
            expirations,
            requestId,
            defaultSecrets.get(identifier)
        );

        Assert.assertEquals(201, response.getStatusCode());
    }

    /**
     * Fetches the value of a secret from the specified Secret.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecretTest() throws ApiException {
        String kind = "variable";
        String secretValue;
        for (String identifier : defaultSecrets.keySet()) {
            secretValue = defaultSecrets.get(identifier);
            String response = api.getSecret(account, kind, identifier);
            Assert.assertEquals(secretValue, response);
        }
    }

    /**
     * Fetch multiple secrets.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecretsTest() throws ApiException {
        String variableIds = "";
        String acceptEncoding = null;
        String requestId = null;
        String kind = "variable";
        String nextId;
        List<String> ids = new ArrayList<String>();
        for (String identifier : defaultSecrets.keySet()) {
            nextId = String.format("%s:%s:%s,", account, kind, identifier);
            variableIds = variableIds.concat(nextId);
            ids.add(nextId.substring(0, nextId.length()));
        }

        variableIds = variableIds.substring(0, variableIds.length());
        Map<?, ?> response = (Map<?, ?>) api.getSecrets(variableIds, acceptEncoding, requestId);
        for (String identifier : ids) {
            String splitId = identifier.split(":")[2];

            Assert.assertEquals(defaultSecrets.get(splitId), response.get(identifier));
        }
    }
}
