/*
 * Conjur
 * This is an API definition for CyberArk Conjur OSS. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cyberark.conjur.sdk.endpoint;

import com.cyberark.conjur.sdk.*;
import com.cyberark.conjur.sdk.ApiException;
import com.cyberark.conjur.sdk.endpoint.*;
import com.cyberark.conjur.sdk.model.AuthenticatorStatus;
import com.cyberark.conjur.sdk.model.AuthenticatorsResponse;
import com.cyberark.conjur.sdk.model.WhoAmI;
import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.*;


/**
 * API tests for StatusApi.
 */
public class StatusApiTest extends ConfiguredTest {

    private StatusApi api;
    private StatusApi badAuthApi;

    /**
     * Load a Conjur policy which declares the OIDC authenticator and sets required
     * variables in Conjur.
     *
     * @throws ApiException
     *          if an API call fails
     * @throws IOException
     *          if the policy file cannot be read
     */
    @BeforeClass
    public static void setUpWebservice() throws ApiException, IOException {
        ConfiguredTest.setupOidcWebservice();
    }

    /**
     * Creates two api objects we can use for testing.
     *
     * @throws ApiException
     *          if the API call fails
     */
    @Before
    public void setUpApis() throws ApiException {
        badAuthApi = new StatusApi(nonAuthClient);
        api = new StatusApi();
    }

    /**
     * Details about which authenticators are on the Conjur Server.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthenticatorsTest200() throws ApiException {
        AuthenticatorsResponse response = api.getAuthenticators();

        String[] enabled = {"authn", "authn-oidc/test", "authn-ldap/test"};

        for (int i = 0; i < enabled.length; i++) {
            Assert.assertTrue(response.getEnabled().contains(enabled[i]));

            Assert.assertTrue(response.getConfigured().contains(enabled[i]));
        }
    }

    /**
     * Details whether an authentication service has been configured properly.
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException
     *          if webservice setup encounters I/O error reading policy from file
     */
    @Test
    public void getServiceAuthenticatorStatusTest200() throws ApiException {
        String authenticator = "authn-oidc";
        String serviceId = "test";

        ApiResponse<AuthenticatorStatus> response = api.getServiceAuthenticatorStatusWithHttpInfo(
            authenticator,
            serviceId,
            account,
            "test-request"
        );

        Assert.assertEquals("ok", response.getData().getStatus());
        Assert.assertEquals(200, response.getStatusCode());
    }

    /**
     * Details whether an authentication service has been configured properly.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAuthenticatorStatusTest403() throws ApiException {
        String authenticator = "authn-oidc";
        String serviceId = "test";
        ApiClient aliceClient = getApiClient("alice");
        StatusApi aliceApi = new StatusApi(aliceClient);
        try {
            aliceApi.getServiceAuthenticatorStatus(authenticator, serviceId, account, "thing1");
        } catch (ApiException e) {
            Assert.assertEquals(e.getCode(), 403);
        }
    }

    /**
     * Details whether an authentication service has been configured properly.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAuthenticatorStatusTest404() throws ApiException {
        String authenticator = "nonexist";
        String serviceId = "test";
        try {
            api.getServiceAuthenticatorStatus(authenticator, serviceId, account);
        } catch (ApiException e) {
            Assert.assertEquals(e.getCode(), 404);
        }
    }

    /**
     * Details whether an authentication service has been configured properly.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAuthenticatorStatusTest500() throws ApiException {
        String authenticator = "authn-oidc";
        String serviceId = "okta";
        try {
            api.getServiceAuthenticatorStatus(authenticator, serviceId, "nonexist");
        } catch (ApiException e) {
            Assert.assertEquals(e.getCode(), 500);
        }
    }

    /**
     * Details whether an authentication service has been configured properly.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceAuthenticatorStatusTest501() throws ApiException {
        String authenticator = "authn-ldap";
        String serviceId = "test";
        try {
            api.getServiceAuthenticatorStatus(authenticator, serviceId, account);
        } catch (ApiException e) {
            Assert.assertEquals(e.getCode(), 501);
        }
    }

    /**
     * Provides information about the client making an API request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @SuppressWarnings("checkstyle:abbreviationaswordinname")
    public void whoAmITest200() throws ApiException {
        ApiResponse<WhoAmI> response = api.whoAmIWithHttpInfo();

        Assert.assertEquals(200, response.getStatusCode());
        Assert.assertEquals(account, response.getData().getAccount());
        Assert.assertEquals(login, response.getData().getUsername());
    }

    /**
     * Provides information about the client making an API request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @SuppressWarnings("checkstyle:abbreviationaswordinname")
    public void whoAmITest401() throws ApiException {
        try {
            badAuthApi.whoAmIWithHttpInfo();
        } catch (ApiException e) {
            Assert.assertEquals(e.getCode(), 401);
        }
    }
}
