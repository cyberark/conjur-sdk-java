/*
 * Conjur
 * This is an API definition for CyberArk Conjur Open Source. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.3.1
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cyberark.conjur.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ServiceAuthenticators
 */
@JsonAdapter(ServiceAuthenticators.Adapter.class)
public enum ServiceAuthenticators {
  
  IAM("authn-iam"),
  
  OIDC("authn-oidc"),
  
  LDAP("authn-ldap"),
  
  K8S("authn-k8s"),
  
  GCP("authn-gcp"),
  
  AZURE("authn-azure"),
  
  JWT("authn-jwt");

  private String value;

  ServiceAuthenticators(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ServiceAuthenticators fromValue(String value) {
    for (ServiceAuthenticators b : ServiceAuthenticators.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ServiceAuthenticators> {
    @Override
    public void write(final JsonWriter jsonWriter, final ServiceAuthenticators enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ServiceAuthenticators read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ServiceAuthenticators.fromValue(value);
    }
  }
}

